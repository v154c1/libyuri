/* ***************************************************************************
 * 					RGB conversions
 *************************************************************************** */

void rgb_rgba(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width, uint8_t alpha)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=alpha;
	}
}
template<>
void convert_line<core::raw_format::rgb24, core::raw_format::rgba32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_rgba(src, dest, width, 255);
}
template<>
void convert_line<core::raw_format::bgr24, core::raw_format::bgra32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_rgba(src, dest, width, 255);
}
void rgb_argb(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width, uint8_t alpha)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=alpha;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;	
	}
}
template<>
void convert_line<core::raw_format::rgb24, core::raw_format::argb32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_argb(src, dest, width, 255);
}
template<>
void convert_line<core::raw_format::bgr24, core::raw_format::abgr32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_argb(src, dest, width, 255);
}
void rgba_rgb(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
		src++;
	}
}
template<>
void convert_line<core::raw_format::rgba32, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::bgra32, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_rgb(src, dest, width);
}

void argb_rgb(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		src++;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
	}
}
template<>
void convert_line<core::raw_format::argb32, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::abgr32, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_rgb(src, dest, width);
}

void rgba_bgra(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		*dest++=*(src+3);
		src+=4;
	}
}
template<>
void convert_line<core::raw_format::bgra32, core::raw_format::rgba32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_bgra(src, dest, width);
}
template<>
void convert_line<core::raw_format::rgba32, core::raw_format::bgra32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_bgra(src, dest, width);
}
void argb_abgr(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+0);
		*dest++=*(src+3);
		*dest++=*(src+2);
		*dest++=*(src+1);
		src+=4;
	}
}
template<>
void convert_line<core::raw_format::abgr32, core::raw_format::argb32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_abgr(src, dest, width);
}
template<>
void convert_line<core::raw_format::argb32, core::raw_format::abgr32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_abgr(src, dest, width);
}

void rgba_abgr(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+3);
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		src+=4;
	}
}
template<>
void convert_line<core::raw_format::bgra32, core::raw_format::argb32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
//	rgba_bgra(src, dest, width);
	rgba_abgr(src, dest, width);
}
template<>
void convert_line<core::raw_format::argb32, core::raw_format::bgra32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
//	rgba_bgra(src, dest, width);
	rgba_abgr(src, dest, width);
}
template<>
void convert_line<core::raw_format::abgr32, core::raw_format::rgba32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
//	rgba_bgra(src, dest, width);
	rgba_abgr(src, dest, width);
}
template<>
void convert_line<core::raw_format::rgba32, core::raw_format::abgr32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
//	rgba_bgra(src, dest, width);
	rgba_abgr(src, dest, width);
}

void rgba_argb(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+3);
		*dest++=*(src+0);
		*dest++=*(src+1);
		*dest++=*(src+2);
		src+=4;
	}
}
template<>
void convert_line<core::raw_format::rgba32, core::raw_format::argb32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_argb(src, dest, width);
}
template<>
void convert_line<core::raw_format::bgra32, core::raw_format::abgr32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgba_argb(src, dest, width);
}

void argb_rgba(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+1);
		*dest++=*(src+2);
		*dest++=*(src+3);
		*dest++=*(src+0);
		src+=4;
	}
}
template<>
void convert_line<core::raw_format::argb32, core::raw_format::rgba32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_rgba(src, dest, width);
}
template<>
void convert_line<core::raw_format::abgr32, core::raw_format::bgra32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	argb_rgba(src, dest, width);
}



void rgb_bgra (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width, uint8_t alpha)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		*dest++=alpha;
		src+=3;
	}
}

template<>
void convert_line<core::raw_format::rgb24, core::raw_format::bgra32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_bgra(src, dest, width, 255);
}
template<>
void convert_line<core::raw_format::bgr24, core::raw_format::rgba32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_bgra(src, dest, width, 255);
}

void rgb_abgr (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width, uint8_t alpha)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=alpha;
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		src+=3;
	}
}

template<>
void convert_line<core::raw_format::rgb24, core::raw_format::abgr32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_abgr(src, dest, width, 255);
}
template<>
void convert_line<core::raw_format::bgr24, core::raw_format::argb32>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb_abgr(src, dest, width, 255);
}
void bgra_rgb (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		src+=4;
	}
}

template<>
void convert_line<core::raw_format::bgra32, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	bgra_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::rgba32, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	bgra_rgb(src, dest, width);
}
void abgr_rgb (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+3);
		*dest++=*(src+2);
		*dest++=*(src+1);
		src+=4;
	}
}

template<>
void convert_line<core::raw_format::abgr32, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	abgr_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::argb32, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	abgr_rgb(src, dest, width);
}
void bgr_rgb (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+2);
		*dest++=*(src+1);
		*dest++=*(src+0);
		src+=3;
	}
}

template<>
void convert_line<core::raw_format::bgr24, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	bgr_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::rgb24, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	bgr_rgb(src, dest, width);
}

void gbr_rgb (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+2);
		*dest++=*(src+0);
		*dest++=*(src+1);
		src+=3;
	}
}
template<>
void convert_line<core::raw_format::gbr24, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	gbr_rgb(src, dest, width);
}
template<>
void convert_line<core::raw_format::rgb24, core::raw_format::gbr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	gbr_rgb(src, dest, width);
}

// LE 16bit rgb -> 8bit rgb
void rgb48_rgb (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+1);
		*dest++=*(src+3);
		*dest++=*(src+5);
		src+=6;
	}
}

template<>
void convert_line<core::raw_format::rgb48, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb48_rgb(src, dest, width);
}

template<>
void convert_line<core::raw_format::bgr48, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb48_rgb(src, dest, width);
}

// LE 16bit rgb -> 8bit bgr
void rgb48_bgr (core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*(src+5);
		*dest++=*(src+3);
		*dest++=*(src+1);
		src+=6;
	}
}

template<>
void convert_line<core::raw_format::rgb48, core::raw_format::bgr24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb48_bgr(src, dest, width);
}

template<>
void convert_line<core::raw_format::bgr48, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	rgb48_bgr(src, dest, width);
}

template<>
void convert_line<core::raw_format::rgb24, core::raw_format::rgb16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		const uint16_t col = 
			((src[0]>>3)<<11) |
			((src[1]>>2)<<5) |
			((src[2]>>3)<<0);
		*dest++ = col & 0xFF;
		*dest++ = col >> 8;
		src+=3;
	}
}
template<>
void convert_line<core::raw_format::rgb24, core::raw_format::bgr16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		const uint16_t col = 
			((src[2]>>3)<<11) |
			((src[1]>>2)<<5) |
			((src[0]>>3)<<0);
		*dest++ = col & 0xFF;
		*dest++ = col >> 8;
		src+=3;
	}
}

/* ***************************************************************************
 * 					YUV conversions
 *************************************************************************** */
#include "YuriConvert_yuv422.impl"



template<>
void convert_line<core::raw_format::yuyv422, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	uint8_t y, u, v;
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		*dest++=*src++;
		u=*dest++=*src++;
		y=*src++;
		v=*src++;
		*dest++=v;
		*dest++=y;
		*dest++=u;
		*dest++=v;
	}
}
template<>
void convert_line<core::raw_format::yuv444, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		src++;
		*dest++=*src++;
		src++;
		*dest++=*src++;
	}
}

template<>
void convert_line<core::raw_format::uyvy422, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	uint8_t y, u, v;
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		u=*src++;
		*dest++=*src++;
		*dest++=u;
		v=*src++;
		y=*src++;
		*dest++=v;
		*dest++=y;
		*dest++=u;
		*dest++=v;
	}
}
template<>
void convert_line<core::raw_format::yuv444, core::raw_format::uyvy422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	uint8_t y;
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		y=*src++;
		*dest++=*src++;
		*dest++=y;
		src++;
		y=*src++;
		src++;
		*dest++=*src++;
		*dest++=y;
	}
}

template<>
void convert_line<core::raw_format::yuva4444, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
		src++;
	}
}
template<>
void convert_line<core::raw_format::ayuv4444, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		src++;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
	}
}
template<>
void convert_line<core::raw_format::yuv444, core::raw_format::yuva4444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=255;
	}
}
template<>
void convert_line<core::raw_format::yuv444, core::raw_format::ayuv4444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width; ++pixel) {
		*dest++=255;
		*dest++=*src++;
		*dest++=*src++;
		*dest++=*src++;
	}
}
template<>
void convert_line<core::raw_format::yuva4444, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		*dest++=*src++;
		*dest++=*src++;
		src++;
		src++;
		*dest++=*src++;
		src++;
		*dest++=*src++;
		src++;
	}
}
template<>
void convert_line<core::raw_format::ayuv4444, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pixel = 0; pixel < width/2; ++pixel) {
		src++;
		*dest++=*src++;
		*dest++=*src++;
		
		src++;
		src++;
		*dest++=*src++;
		src++;
		*dest++=*src++;
	}
}

/* ***************************************************************************
 * 					YUV - RGB conversions
 *************************************************************************** */
#include "YuriConvert_yuv_rgb.impl"

/* ***************************************************************************
 * 					Single component conversions
 *************************************************************************** */

template<>
void convert_line<core::raw_format::u8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}

template<>
void convert_line<core::raw_format::v8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}
template<>
void convert_line<core::raw_format::r8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}
template<>
void convert_line<core::raw_format::g8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}
template<>
void convert_line<core::raw_format::b8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}
template<>
void convert_line<core::raw_format::depth8, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	std::copy(src, src+width, dest);
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::y16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + width;
	while (src < end) {
		*dest++ = 0;
		*dest++ = *src++;
	}
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + 2 * width;
	src++;
	while (src < end) {
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::yuyv422, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + 2 * width;
	while (src < end) {
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::yuyv422, core::raw_format::y16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + 2 * width;
	while (src < end) {
		*dest++ = 0;
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::yvyu422, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::yuyv422, core::raw_format::y8>(src, dest, width);
}

template<>
void convert_line<core::raw_format::yvyu422, core::raw_format::y16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::yuyv422, core::raw_format::y16>(src, dest, width);
}

template<>
void convert_line<core::raw_format::uyvy422, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + 2 * width;
	++src;
	while (src < end) {
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::uyvy422, core::raw_format::y16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	const auto end = src + 2 * width;
	++src;
	while (src < end) {
		*dest++ = 0;
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::vyuy422, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::uyvy422, core::raw_format::y8>(src, dest, width);
}

template<>
void convert_line<core::raw_format::vyuy422, core::raw_format::y16>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::uyvy422, core::raw_format::y16>(src, dest, width);
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = *src++;
		*dest++ = 128;
	}
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::yvyu422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::y8, core::raw_format::yuyv422>(src, dest, width);
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::uyvy422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = 128;
		*dest++ = *src++;
	}
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::vyuy422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::y8, core::raw_format::uyvy422>(src, dest, width);
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = *src++;
		*dest++ = 128;
		*dest++ = 128;
	}
}

template<>
void convert_line<core::raw_format::y8, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = *src++;
		*dest++ = *src++;
		*dest++ = 128;
	}
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width * 2;
	++src;
	while (src < end) {
		*dest++ = *src;
		*dest++ = 128;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::yvyu422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::y8, core::raw_format::yuyv422>(src, dest, width);
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::uyvy422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width * 2;
	++src;
	while (src < end) {
		*dest++ = 128;
		*dest++ = *src;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::vyuy422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::y8, core::raw_format::uyvy422>(src, dest, width);
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::yuv444>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width * 2;
	++src;
	while (src < end) {
		*dest++ = *src;
		*dest++ = 128;
		*dest++ = 128;
		src+=2;
	}
}

template<>
void convert_line<core::raw_format::y16, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width * 2 - 2*(width%2);
	++src;
	while (src < end) {
		*dest++ = *src;
		src+=2;
		*dest++ = *src;
		src+=2;
		*dest++ = 128;
	}
}


template<>
void convert_line<core::raw_format::y8, core::raw_format::rgb24>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = *src;
		*dest++ = *src;
		*dest++ = *src++;
	}
}

template<>
void convert_line<core::raw_format::rgb24, core::raw_format::y8>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + width;
	while (src < end) {
		*dest++ = static_cast<uint8_t>(
						(static_cast<uint_fast16_t>(*(src+0)) + 
						 static_cast<uint_fast16_t>(*(src+1)) +
						 static_cast<uint_fast16_t>(*(src+2))) / 3);
		src+=3;
	}
}

/* ***************************************************************************
 * 					Other YUV conversions
 *************************************************************************** */

template<>
void convert_line<core::raw_format::yuv444, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 3 * width - (width % 4);
	while (src < end) {
		
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+1)) + *(src+4)  + *(src+7) + *(src+10)) >> 2);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+2)) + *(src+5)  + *(src+8) + *(src+11)) >> 2);
		*dest++ = *(src+0);
		*dest++ = *(src+3);
		*dest++ = u;
		*dest++ = *(src+6);
		*dest++ = *(src+9);
		*dest++ = v;
		src+=12;
	}
}

template<>
void convert_line<core::raw_format::yuv444, core::raw_format::yvu411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 3 * width - (width % 4);
	while (src < end) {
		
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+1)) + *(src+4)  + *(src+7) + *(src+10)) >> 2);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+2)) + *(src+5)  + *(src+8) + *(src+11)) >> 2);
		*dest++ = *(src+0);
		*dest++ = *(src+3);
		*dest++ = v;
		*dest++ = *(src+6);
		*dest++ = *(src+9);
		*dest++ = u;
		src+=12;
	}
}

template<>
void convert_line<core::raw_format::yuv411, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	for (size_t pix = 0; pix < width; pix+=4) {
		*dest++ = *src++;
		const auto y1 = *src++;
		const auto u = *src++;
		const auto y2 = *src++;
		const auto y3 = *src++;
		const auto v = *src++;
		*dest++ = u;
		*dest++ = y1;
		*dest++ = v;
		*dest++ = y2;
		*dest++ = u;
		*dest++ = y3;
		*dest++ = v;
	}
}

template<>
void convert_line<core::raw_format::yuyv422, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 2 * width - (width % 4);
	while (src < end) {
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+1)) + *(src+5)) >> 1);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+3)) + *(src+7)) >> 1);
		*dest++ = *(src+0);
		*dest++ = *(src+2);
		*dest++ = u;
		*dest++ = *(src+4);
		*dest++ = *(src+6);
		*dest++ = v;
		src+=8;
	}
}


template<>
void convert_line<core::raw_format::yvyu422, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 2 * width - (width % 4);
	while (src < end) {
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+3)) + *(src+7)) >> 1);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+1)) + *(src+5)) >> 1);
		*dest++ = *(src+0);
		*dest++ = *(src+2);
		*dest++ = u;
		*dest++ = *(src+4);
		*dest++ = *(src+6);
		*dest++ = v;
		src+=8;
	}
}

template<>
void convert_line<core::raw_format::uyvy422, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 2 * width - (width % 4);
	while (src < end) {
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+0)) + *(src+4)) >> 1);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+2)) + *(src+6)) >> 1);
		*dest++ = *(src+1);
		*dest++ = *(src+3);
		*dest++ = u;
		*dest++ = *(src+5);
		*dest++ = *(src+7);
		*dest++ = v;
		src+=8;
	}
}

template<>
void convert_line<core::raw_format::vyuy422, core::raw_format::yuv411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const auto end = src + 2 * width - (width % 4);
	while (src < end) {
		auto u = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+2)) + *(src+6)) >> 1);
		auto v = static_cast<uint8_t>((static_cast<uint_fast16_t>(*(src+0)) + *(src+4)) >> 1);
		*dest++ = *(src+1);
		*dest++ = *(src+3);
		*dest++ = u;
		*dest++ = *(src+5);
		*dest++ = *(src+7);
		*dest++ = v;
		src+=8;
	}
}

template<>
void convert_line<core::raw_format::yuyv422, core::raw_format::yvu411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::yvyu422, core::raw_format::yuv411>(src, dest, width);
}

template<>
void convert_line<core::raw_format::yvyu422, core::raw_format::yvu411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::yuyv422, core::raw_format::yuv411>(src, dest, width);
}

template<>
void convert_line<core::raw_format::uyvy422, core::raw_format::yvu411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::vyuy422, core::raw_format::yuv411>(src, dest, width);
}

template<>
void convert_line<core::raw_format::vyuy422, core::raw_format::yvu411>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{	
	return convert_line<core::raw_format::uyvy422, core::raw_format::yuv411>(src, dest, width);
}

/* ***************************************************************************
 * 					V210 conversions
 *************************************************************************** */

//template<>
//size_t get_linesize<core::raw_format::yuv422_v210>(size_t width)
//{
//	return 16*(width /6);
//			//8 * (width / 3) + 4 * (width % 3);
//}

//template<>
//core::pBasicFrame allocate_frame<core::raw_format::yuv422_v210>(size_t width, size_t height)
//{
//	//core::pBasicFrame frame = core::BasicIOThread::allocate_empty_frame(get_linesize<YURI_FMT_V210>(width)*height,true);
//	//frame->set_parameters(YURI_FMT_V210, width, height);
//	//return frame;
//}


#define V210_B0_BE(x) (((x)&0x000003FF)>> 0)
#define V210_B1_BE(x) (((x)&0x000FFC00)>>10)
#define V210_B2_BE(x) (((x)&0x3FF00000)>>20)


//#define V210_B0(x) (((x)&0xFF000000)>> 24) | ((x)&0x00020000) >> 8))
//#define V210_B0(x) (((x)&0x00FD0000)>> 18) | ((x)&0x00020000) >> 24))
//#define V210_B1(x) (((x)&0x000FFC00)>>10)
//#define V210_B2(x) (((x)&0x3FF00000)>>20)


// Full range
/* 
template<>
void convert_line<core::raw_format::yuv422_v210, core::raw_format::yuyv422>
(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
{
	const uint32_t* src_pixels = reinterpret_cast<const uint32_t*>(src);
	
	
	for (size_t pixel = 0; pixel < width/3; ++pixel) {
//		*dest++=V210_B1(*src_pixels)>>2;
//		*dest++=0x7f;
//		*dest++=V210_B0(*(src_pixels+1))>>2;
//		*dest++=0x7f;
//		*dest++=V210_B2(*(src_pixels+1))>>2;
//		*dest++=0x7f;
		
//		std::fill(dest, dest+6, V210_B1(*src_pixels)>>2);
//		dest+=6;
		
		*dest++=V210_B1_BE(*src_pixels)>>2;
		*dest++=V210_B0_BE(*src_pixels)>>2;
		*dest++=V210_B0_BE(*(src_pixels+1))>>2;
		*dest++=V210_B2_BE(*src_pixels)>>2;
		*dest++=V210_B2_BE(*(src_pixels+1))>>2;
		*dest++=V210_B1_BE(*(src_pixels+1))>>2;
		src_pixels+=2;
		
//		*dest++=V210_B0(*src_pixels)>>2;
//		*dest++=V210_B1(*src_pixels)>>2;
//		*dest++=V210_B2(*src_pixels)>>2;
//		src_pixels++;
//		*dest++=V210_B0(*src_pixels)>>2;
//		*dest++=V210_B1(*src_pixels)>>2;
//		*dest++=V210_B2(*src_pixels)>>2;
//		src_pixels++;
	}
}
*/

//template<>
//void convert_line<YURI_FMT_V210, core::raw_format::uyvy422>
//(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
//{
//	const uint32_t* src_pixels = reinterpret_cast<const uint32_t*>(src);
//	for (size_t pixel = 0; pixel < width/3; ++pixel) {
//		*dest++=V210_B0(*src_pixels)>>2;
//		*dest++=V210_B1(*src_pixels)>>2;
//		*dest++=V210_B2(*src_pixels)>>2;
//		src_pixels++;
//		*dest++=V210_B0(*src_pixels)>>2;
//		*dest++=V210_B1(*src_pixels)>>2;
//		*dest++=V210_B2(*src_pixels)>>2;
//		src_pixels++;
//	}
//}
//// Full range
//template<>
//void convert_line<core::raw_format::yuyv422, YURI_FMT_V210>
//(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
//{
//	uint32_t* dest_pixels = reinterpret_cast<uint32_t*>(dest);
//	for (size_t pixel = 0; pixel < width/3; ++pixel) {
//		*dest_pixels++=(  (*(src+1))<<2 ) | (  (*(src+0))<<12 ) | (  (*(src+3))<<22 ); 
//		*dest_pixels++=(  (*(src+2))<<2 ) | (  (*(src+5))<<12 ) | (  (*(src+4))<<22 );
//		src+=6;
//	}
//}
//// Full range
//template<>
//void convert_line<core::raw_format::uyvy422, YURI_FMT_V210>
//(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width)
//{
//	uint32_t* dest_pixels = reinterpret_cast<uint32_t*>(dest);
//	for (size_t pixel = 0; pixel < width/3; ++pixel) {
//		*dest_pixels++=(  (*(src+0))<<2 ) | (  (*(src+1))<<12 ) | (  (*(src+2))<<22 ); 
//		src+=3;
//		*dest_pixels++=(  (*(src+0))<<2 ) | (  (*(src+1))<<12 ) | (  (*(src+2))<<22 );
//		src+=3;
//	}
//}

/* ***************************************************************************
 * 					Default template definitions
 *************************************************************************** */

template<format_t fmt_in, format_t fmt_out>
void convert_line(core::Plane::const_iterator src, core::Plane::iterator dest, size_t width, const YuriConvertor&)
{
	return convert_line<fmt_in, fmt_out>(src, dest, width);
}

template<format_t fmt>
core::pRawVideoFrame allocate_frame(size_t width, size_t height)
{
	return core::RawVideoFrame::create_empty(fmt, {width, height}, true);
}
//template<format_t fmt> size_t get_linesize(size_t width)
//{
//	//FormatInfo_t fi_in			= core::BasicPipe::get_format_info(fmt);
//	//assert (fi_in && !(fi_in->bpp % 8));
//	//return (width * fi_in->bpp) / 8;
//	const auto& fi = core::raw_format::get_format_info(fmt);
//	assert (fi.planes.size()==1);
//	assert (fi.planes[0].bit_depth.first % (8* fi.planes[0].bit_depth.second)== 0);
//	return width * fi.planes[0].bit_depth.first / (8* fi.planes[0].bit_depth.second);
//}

template<format_t fmt_in, format_t fmt_out>
void convert_multiple_lines(const size_t linesize_in, 
							const size_t linesize_out,
							core::Plane::const_iterator src,
							core::Plane::iterator dest,
							const size_t width,
							const YuriConvertor& conv,
							size_t lines)
{
	for (size_t line = 0; line < lines; ++line) {
		convert_line<fmt_in, fmt_out>(src, dest, width, conv);
		src+=linesize_in;
		dest+=linesize_out;
	}
}

template<format_t fmt_in, format_t fmt_out>
core::pRawVideoFrame convert_formats(const core::pRawVideoFrame& frame, const YuriConvertor& conv, size_t threads)
{
	const size_t width 			= frame->get_width();
	const size_t height			= frame->get_height();
	core::pRawVideoFrame outframe 	= allocate_frame<fmt_out>(width, height);
	outframe->copy_video_params(*frame);
//	const size_t linesize_in 	= get_linesize<fmt_in>(width);
//	const size_t linesize_out 	= get_linesize<fmt_out>(width);
	const size_t linesize_in 	= PLANE_DATA(frame,0).get_line_size();
	const size_t linesize_out 	= PLANE_DATA(outframe,0).get_line_size();
	core::Plane::const_iterator src	= PLANE_DATA(frame,0).begin();
	core::Plane::iterator dest		= PLANE_DATA(outframe,0).begin();
	
	if (!threads || threads == 1) {	
		for (size_t line = 0; line < height; ++line) {
			convert_line<fmt_in, fmt_out>(src, dest, width, conv);
			src+=linesize_in;
			dest+=linesize_out;
		}
	} else {
		size_t task_lines = height / threads;
		std::vector<std::future<void>> results;
		size_t start_line = 0;
		size_t remaining = height;
		auto f = [&](size_t s, size_t r) {
			return convert_multiple_lines<fmt_in, fmt_out>( 
					linesize_in, 
					linesize_out,
					src + s * linesize_in,
					dest + s * linesize_out,
					width,
					conv,
					std::min(task_lines, r)
				);
		};
		for (auto t: irange(threads)) {
			(void)t;
			results.push_back(
					std::async(std::launch::async,
						f, start_line, remaining)
					);
			start_line += task_lines;
			remaining -= task_lines;		
		}
		for (auto& t: results) {
			t.get();
		}
	}
	return outframe;
}


